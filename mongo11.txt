// Creating the Employee collection
db.createCollection("Employee")

// Inserting documents into the Employee collection
db.Employee.insertMany([
    {
        Name: { FName: "John", LName: "Doe" },
        CompanyName: "Infosys",
        Salary: 55000,
        Designation: "Programmer",
        Age: 28,
        Expertise: ["Java", "Python", "MongoDB"],
        DOB: "1995-05-15",
        Email: "john.doe@example.com",
        Contact: "1234567890",
        Address: [
            { PAddr: "123 Main St", LAddr: "Apt 45" },
            { PAddr: "456 Park Ave", LAddr: "Suite 12" }
        ]
    },
    // Insert more documents as needed
    // ...
]);

// Queries

// 1. Final name of Employee where age is less than 30 and salary more than 50000.
db.Employee.findOne({ Age: { $lt: 30 }, Salary: { $gt: 50000 } }, { "Name.FName": 1, "Name.LName": 1, _id: 0 });

// 2. Create a new document if no document in the employee collection contains {Designation: "Tester", CompanyName: "TCS", Age: 25}.
db.Employee.updateOne(
    { Designation: "Tester", CompanyName: "TCS", Age: 25 },
    { $setOnInsert: {  document fields  } },
    { upsert: true }
);

// 3. Select all documents in the collection where the field age has a value less than 30 or the value of the salary field is greater than 40000.
db.Employee.find({
    $or: [
        { Age: { $lt: 30 } },
        { Salary: { $gt: 40000 } }
    ]
});

// 4. Find documents where Designation is not equal to "Developer".
db.Employee.find({ Designation: { $ne: "Developer" } });

// 5. Find _id, Designation, Address, and Name from all documents where CompanyName is "Infosys".
db.Employee.find({ CompanyName: "Infosys" }, { _id: 1, Designation: 1, Address: 1, "Name": 1 });

// 6. Display only FName and LName of all Employees in MongoDB language.
db.Employee.find({}, { "Name.FName": 1, "Name.LName": 1, _id: 0 });
